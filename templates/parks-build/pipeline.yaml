apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: test-build-and-deploy-a-project
  namespace: a-project
spec:
  params:
    - description: name of the deployment to be patched
      name: deployment-name
      type: string
    - description: url of the git repo for the code of deployment
      name: git-url
      type: string
    - default: master
      description: revision to be used from repo of the code for deployment
      name: git-revision
      type: string
    - description: image to be build from the code
      name: IMAGE
      type: string
  tasks:
    - name: print-hello
      taskRef:
        kind: Task
        name: hello
    - name: fetch-repository
      params:
        - name: url
          value: $(params.git-url)
        - name: subdirectory
          value: ''
        - name: deleteExisting
          value: 'true'
        - name: revision
          value: $(params.git-revision)
      runAfter:
        - print-hello
      taskRef:
        kind: ClusterTask
        name: git-clone
      workspaces:
        - name: output
          workspace: shared-workspace
    - name: build-image
      params:
        - name: TLSVERIFY
          value: 'false'
        - name: IMAGE
          value: $(params.IMAGE)
        - name: DOCKERFILE
          value: ./Containerfile
        # Is the IMAGE_URL value needed or just this value in IMAGE?
        - name: IMAGE_URL
          value: 'image-registry.openshift-image-registry.svc:5000/a-project/parks-dashboard'
      runAfter:
        - fetch-repository
      taskRef:
        kind: ClusterTask
        name: buildah
      workspaces:
        - name: source
          workspace: shared-workspace
    # Add task here to git-clone the GitOps repo and THEN do this
    - name: apply-manifests
      runAfter:
        - build-image
      taskRef:
        kind: Task
        name: apply-manifests
      workspaces:
        - name: source
          workspace: shared-workspace
    - name: update-deployment
      params:
        - name: deployment
          value: $(params.deployment-name)
        - name: IMAGE
          value: $(params.IMAGE)
      runAfter:
        - apply-manifests
      taskRef:
        kind: Task
        name: update-deployment
      workspaces:
        - name: source
          workspace: shared-workspace
  workspaces:
    - name: shared-workspace
